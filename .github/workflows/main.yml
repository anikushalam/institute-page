name: CI/CD Pipeline for Next.js App

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from GitHub
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  
          password: ${{ secrets.DOCKER_PASSWORD }}  

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/demo-institute:latest .

      # Push the image to Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/demo-institute:latest

      # Deploy to EC2
      - name: Deploy to EC2
        env:
          # Environment variables for EC2 SSH access
          USERNAME: ${{ secrets.USERNAME }}  
          HOST: ${{ secrets.HOST }}         
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  
        run: |
          # Step 1: Write the private key content to a file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem  # Restrict permissions for security

          # Step 2: SSH into the EC2 instance and execute Docker Compose commands
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USERNAME@$HOST << 'EOF'
            # Navigate to the directory containing the docker-compose.yml file
            cd /home/ubuntu/

            # Pull the latest Docker image from the registry
            docker-compose pull

            # Restart the application with the new image
            docker-compose up -d
          EOF

          # Step 3: Clean up the private key file after use
          rm private_key.pem
